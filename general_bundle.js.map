{"version":3,"file":"general_bundle.js","mappings":"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","sources":["webpack://GeneralAPI/./src/password_toggler.js","webpack://GeneralAPI/./src/g_modal_loader.js","webpack://GeneralAPI/./src/scrollToTop.js","webpack://GeneralAPI/./src/sidebar.js","webpack://GeneralAPI/./src/profileTabs.js","webpack://GeneralAPI/./src/theme_toggler.js","webpack://GeneralAPI/./src/device_restriction.js","webpack://GeneralAPI/./src/idle_time_counter.js","webpack://GeneralAPI/webpack/bootstrap","webpack://GeneralAPI/./src/general_api.js"],"sourcesContent":[" const toggle = document.getElementById(\"togglePassword\");\r\n const passwordInput = document.getElementById(\"password\"); \r\n if (toggle && passwordInput) {\r\n     toggle.addEventListener(\"click\", function () {\r\n     const type = passwordInput.getAttribute(\"type\") === \"password\" ? \"text\" : \"password\";\r\n     passwordInput.setAttribute(\"type\", type);\r\n      this.classList.toggle(\"bi-eye\");\r\n      this.classList.toggle(\"bi-eye-slash\");\r\n      });\r\n    }\r\n ","// g_modal_loader.js\r\r/**\r * Dynamically loads and shows a Bootstrap modal by fetching its HTML via AJAX.\r * \r * @param {string} modalName - The name of the modal PHP file to fetch (without .php extension).\r */\rfunction loadAndShowModal(modalName) {\r    const existingModal = document.getElementById(modalName + '-modal');\r    if (existingModal) {\r        new bootstrap.Modal(existingModal).show();\r        return;\r    }\r\r    fetch(`/logic_n_design/centralized_hub/content_grabber/php_grabbers/fetch_g_modals.php?modal=${encodeURIComponent(modalName)}`)\r        .then(response => {\r            if (!response.ok) throw new Error(`Failed to load modal \"${modalName}\" (status ${response.status})`);\r            return response.text();\r        })\r        .then(html => {\r            const container = document.getElementById('dynamic-modal-container');\r            if (!container) {\r                console.error('Modal container element (#dynamic-modal-container) not found in DOM.');\r                return;\r            }\r            container.innerHTML = html;\r            const modalEl = container.querySelector('.modal');\r            if (modalEl) {\r                new bootstrap.Modal(modalEl).show();\r            } else {\r                console.error('Loaded modal does not contain .modal element.');\r            }\r        })\r        .catch(err => {\r            console.error('Error loading modal:', err);\r            alert(`Could not load modal \"${modalName}\". Please try again later.`);\r        });\r}\r\r// Make function accessible globally (plain <button onclick=\"...\"> style)\rif (typeof window !== 'undefined') {\r    window.loadAndShowModal = loadAndShowModal;\r}\r\r// Optional: If you're using exports for bundling as API (e.g., in GeneralAPI)\rexport { loadAndShowModal };\r","// scrollToTop.js\r\n// Displays scroll-to-top button on scroll and smooth scrolls up on click\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const scrollToTopBtn = document.querySelector('.scroll-to-top');\r\n\r\n    if (!scrollToTopBtn) return;\r\n\r\n    window.addEventListener('scroll', () => {\r\n        if (window.scrollY > 200) {\r\n            scrollToTopBtn.classList.remove('d-none');\r\n        } else {\r\n            scrollToTopBtn.classList.add('d-none');\r\n        }\r\n    });\r\n\r\n    scrollToTopBtn.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    });\r\n});\r\n","// sidebar.js\r\n// Handles desktop and mobile sidebar toggle, saving state to localStorage, and responsive behavior\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const sidebarWrapper = document.getElementById('sidebar-wrapper');\r\n    const sidebarToggle = document.getElementById('sidebarToggle');\r\n    const sidebarToggleMobile = document.getElementById('sidebarToggleMobile');\r\n    const contentWrapper = document.getElementById('content-wrapper');\r\n    const bodyElement = document.body;\r\n\r\n    // Toggle desktop sidebar collapsed or expanded\r\n    function toggleSidebar() {\r\n        const isCollapsed = sidebarWrapper.classList.toggle('collapsed');\r\n        contentWrapper.classList.toggle('expanded-content');\r\n\r\n        if (sidebarToggle) {\r\n            const toggleIcon = sidebarToggle.querySelector('i');\r\n            if (isCollapsed) {\r\n                toggleIcon.classList.replace('bi-chevron-left', 'bi-chevron-right');\r\n                localStorage.setItem('sidebarCollapsed', 'true');\r\n            } else {\r\n                toggleIcon.classList.replace('bi-chevron-right', 'bi-chevron-left');\r\n                localStorage.removeItem('sidebarCollapsed');\r\n            }\r\n        }\r\n    }\r\n\r\n    // Desktop toggle event\r\n    if (sidebarToggle) {\r\n        sidebarToggle.addEventListener('click', toggleSidebar);\r\n    }\r\n\r\n    // Mobile toggle event: shows/hides sidebar overlay and disables scrolling\r\n    if (sidebarToggleMobile) {\r\n        sidebarToggleMobile.addEventListener('click', () => {\r\n            sidebarWrapper.classList.toggle('show-mobile');\r\n            bodyElement.classList.toggle('overflow-hidden');\r\n\r\n            if (sidebarWrapper.classList.contains('show-mobile')) {\r\n                sidebarWrapper.classList.remove('collapsed');\r\n                contentWrapper.classList.remove('expanded-content');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Initialize sidebar state based on window width and saved state\r\n    function initializeSidebarState() {\r\n        if (window.innerWidth >= 768) {\r\n            sidebarWrapper.classList.remove('show-mobile');\r\n            bodyElement.classList.remove('overflow-hidden');\r\n\r\n            if (localStorage.getItem('sidebarCollapsed') === 'true') {\r\n                sidebarWrapper.classList.add('collapsed');\r\n                contentWrapper.classList.add('expanded-content');\r\n                if (sidebarToggle) {\r\n                    sidebarToggle.querySelector('i').classList.replace('bi-chevron-left', 'bi-chevron-right');\r\n                }\r\n            } else {\r\n                sidebarWrapper.classList.remove('collapsed');\r\n                contentWrapper.classList.remove('expanded-content');\r\n                if (sidebarToggle) {\r\n                    sidebarToggle.querySelector('i').classList.replace('bi-chevron-right', 'bi-chevron-left');\r\n                }\r\n            }\r\n        } else {\r\n            sidebarWrapper.classList.remove('collapsed');\r\n            sidebarWrapper.classList.remove('show-mobile');\r\n            contentWrapper.classList.remove('expanded-content');\r\n            bodyElement.classList.remove('overflow-hidden');\r\n        }\r\n    }\r\n\r\n    // On load and on resized window, with debounce\r\n    initializeSidebarState();\r\n    let resizeTimer;\r\n    window.addEventListener('resize', () => {\r\n        clearTimeout(resizeTimer);\r\n        resizeTimer = setTimeout(() => {\r\n            initializeSidebarState();\r\n        }, 1000);\r\n    });\r\n});\r\n","// profileTabs.js\r\n// Updates settings heading based on Bootstrap tab selection in profile section\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const profileTabs = document.getElementById('profileTabs');\r\n    const settingsHeading = document.getElementById('settingsHeading');\r\n\r\n    if (!profileTabs || !settingsHeading) return;\r\n\r\n    const tabHeadingMap = {\r\n        'account-tab': 'Account Settings',\r\n        'profile-tab': 'Profile Settings',\r\n        'security-tab': 'Security Settings',\r\n        'customization-tab': 'Customized Settings',\r\n        'public-appearance-tab': 'Public Profile',\r\n        'admin-console-tab': 'Admin Console'\r\n    };\r\n\r\n    function updateHeading(tabId) {\r\n        settingsHeading.textContent = tabHeadingMap[tabId] || 'Settings';\r\n    }\r\n\r\n    profileTabs.addEventListener('shown.bs.tab', (event) => {\r\n        updateHeading(event.target.id);\r\n    });\r\n\r\n    // Set initial heading on page load based on active tab\r\n    const activeTab = profileTabs.querySelector('.nav-link.active');\r\n    if (activeTab) {\r\n        updateHeading(activeTab.id);\r\n    }\r\n});\r\n","document.addEventListener('DOMContentLoaded', function () {\r\n  const themeSwitch = document.getElementById('themeSwitch');\r\n  const primaryThemeLink = document.getElementById('primaryThemeLink');\r\n  const htmlElement = document.documentElement;\r\n  const DEFAULT_THEME_FILENAME = 'aarya-original-base.css';\r\n  const themeModalId = 'customThemeToast';\r\n  const dynamicModalName = 'theme_toggle_modal'; // your modal fetch key for AJAX\r\n\r\n  function showCustomThemeModal() {\r\n    let modalEl = document.getElementById(themeModalId);\r\n    if (modalEl) {\r\n      const modalInstance = bootstrap.Modal.getOrCreateInstance(modalEl);\r\n      modalInstance.show();\r\n      setTimeout(() => {\r\n        modalInstance.hide();\r\n      }, 4000);\r\n    } else if (typeof window.loadAndShowModal === 'function') {\r\n      window.loadAndShowModal(dynamicModalName);\r\n    } else {\r\n      alert(\"Unable to display theme modal: loader not available.\");\r\n    }\r\n  }\r\n\r\n  function isCustomThemeActive() {\r\n    return primaryThemeLink && !primaryThemeLink.href.includes(DEFAULT_THEME_FILENAME);\r\n  }\r\n\r\n  function handleThemeSwitchState() {\r\n    if (!themeSwitch) return;\r\n    if (isCustomThemeActive()) {\r\n      themeSwitch.classList.add('disabled-toggle');\r\n      themeSwitch.checked = false;\r\n      const label = themeSwitch.nextElementSibling;\r\n      if (label) label.textContent = 'Custom Theme';\r\n    } else {\r\n      themeSwitch.classList.remove('disabled-toggle');\r\n      const savedTheme = localStorage.getItem('aarya-theme') || 'dark';\r\n      setTheme(savedTheme);\r\n    }\r\n  }\r\n\r\n  function setTheme(theme) {\r\n    htmlElement.setAttribute('data-bs-theme', theme);\r\n    localStorage.setItem('aarya-theme', theme);\r\n    if (!themeSwitch.classList.contains('disabled-toggle')) {\r\n      themeSwitch.checked = (theme === 'dark');\r\n      const label = themeSwitch.nextElementSibling;\r\n      if (label) label.textContent = (theme === 'dark' ? 'Dark Mode' : 'Light Mode');\r\n    }\r\n  }\r\n\r\n  const savedTheme = localStorage.getItem('aarya-theme');\r\n  setTheme(savedTheme || 'dark');\r\n  handleThemeSwitchState();\r\n\r\n  if (themeSwitch) {\r\n    themeSwitch.addEventListener('change', function () {\r\n      if (themeSwitch.classList.contains('disabled-toggle')) {\r\n        showCustomThemeModal();\r\n        themeSwitch.checked = false;\r\n      } else {\r\n        setTheme(this.checked ? 'dark' : 'light');\r\n      }\r\n    });\r\n    const labelEl = themeSwitch.nextElementSibling;\r\n    if (labelEl) {\r\n      labelEl.addEventListener('click', function (e) {\r\n        if (themeSwitch.classList.contains('disabled-toggle')) {\r\n          e.preventDefault();\r\n          showCustomThemeModal();\r\n        }\r\n      });\r\n    }\r\n  }\r\n});\r\n","document.addEventListener('DOMContentLoaded', function() {\r\n    const minDesktopWidth = 992; // Bootstrap's 'lg' breakpoint\r\n\r\n    // Find the main content container of your dashboard.\r\n    // This is typically the element that wraps all dashboard elements\r\n    // except the sidebar (which is fixed/toggled separately).\r\n    // Based on your previous code, it's likely '#wrapper' or '#content-wrapper'.\r\n    // Let's assume '#wrapper' contains everything visible that needs to be hidden.\r\n    const dashboardContent = document.getElementById('wrapper'); // Or getElementById('content-wrapper') if only blocking main content\r\n\r\n    // Create the access denied message element dynamically\r\n    let accessDeniedMessage = document.getElementById('access-denied-message');\r\n    if (!accessDeniedMessage) {\r\n        accessDeniedMessage = document.createElement('div');\r\n        accessDeniedMessage.id = 'access-denied-message';\r\n        accessDeniedMessage.innerHTML = `\r\n            <img src=\"../../structural_beam/images/logo/logo.png\" alt=\"Aarya Logo\" style=\"width: 100px; height: 80px; margin-bottom: 20px;\">\r\n            <h1 style=\"font-size: 2.5em; margin-bottom: 10px;\">Access Restricted</h1>\r\n            <p style=\"font-size: 1.1em; max-width: 600px; color: #adb5bd;\">\r\n                For optimal performance and security, the Aarya Dashboard is currently only accessible on desktop computers.\r\n                Please use a device with a screen width of ${minDesktopWidth} pixels or greater.\r\n            </p>\r\n            <p style=\"font-size: 0.9em; color: #adb5bd;\">\r\n                Reflecting ONS principles of trust and honesty, Aarya aims to provide reliable support.\r\n            </p>\r\n        `;\r\n        // Append it to the body, but keep it hidden by default via CSS\r\n        document.body.appendChild(accessDeniedMessage);\r\n    }\r\n\r\n    function checkDeviceAccess() {\r\n        if (window.innerWidth < minDesktopWidth) {\r\n            // Block access: hide dashboard content, show restriction message\r\n            if (dashboardContent) {\r\n                dashboardContent.classList.add('d-none'); // Hide dashboard\r\n            }\r\n            accessDeniedMessage.classList.remove('d-none'); // Show restriction message\r\n            document.body.style.overflow = 'hidden'; // Prevent scrolling\r\n        } else {\r\n            // Allow access: show dashboard content, hide restriction message\r\n            if (dashboardContent) {\r\n                dashboardContent.classList.remove('d-none'); // Show dashboard\r\n            }\r\n            accessDeniedMessage.classList.add('d-none'); // Hide restriction message\r\n            document.body.style.overflow = ''; // Allow scrolling\r\n        }\r\n    }\r\n\r\n    // Initialize the CSS for the message and content\r\n    // This will prevent flicker by immediately applying display:none or flex\r\n    accessDeniedMessage.style.cssText = `\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        min-height: 100vh;\r\n        text-align: center;\r\n        font-family: 'Poppins', sans-serif;\r\n        background-color: var(--bg-main, #212529); /* Use CSS var for theme, fallback */\r\n        color: var(--bs-body-color, #f8f9fa); /* Use CSS var for theme, fallback */\r\n        padding: 20px;\r\n        position: fixed; /* Overlay on top */\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        z-index: 9999; /* Ensure it's on top of everything */\r\n    `;\r\n\r\n    // Run on initial load\r\n    checkDeviceAccess();\r\n\r\n    // Run on resize to handle orientation changes or window resizing\r\n    let resizeTimer;\r\n    window.addEventListener('resize', () => {\r\n        clearTimeout(resizeTimer);\r\n        resizeTimer = setTimeout(checkDeviceAccess, 100); // Debounce for performance\r\n    });\r\n});","// timer.js\r\nlet inactivityTimeout;\r\nlet modalTimeout;\r\nlet inactivityModal; // This refers to the dynamically added inactivity modal\r\nlet inactivityModalOk;\r\nlet originalTitle = document.title;\r\n\r\n// --- Shift Details Specific Variables & Constants ---\r\n// In a real application, login time would come from the server session.\r\n// We'll simulate a login for demonstration.\r\n// This should be set once on login and saved persistently (e.g., in localStorage or server session)\r\n// If localStorage 'loginStartTime' is used for this, it will be shared by both time calculations.\r\nconst MOCK_SHIFT_DURATION_HOURS = 8; // Assuming an 8-hour shift in total\r\nconst MOCK_TOTAL_BREAK_ALLOWANCE_MINUTES = 75; // Total allowance: 25 (1st) + 50 (Food)\r\n\r\n// --- MOCK BREAK DATA (for Shift Details Modal) ---\r\n// This will represent what breaks the user has actually taken.\r\n// In a real system, this would come from the database/server.\r\nconst MOCK_TAKEN_BREAKS = [\r\n    { type: \"1st Break\", duration: 25, start: null } // duration in minutes\r\n    // Add more taken breaks here if needed for mocking\r\n];\r\n// For 'start' times, if you want real timestamps for each break taken,\r\n// you'd populate them here (e.g., from server data).\r\n// For now, we'll just use the total duration.\r\nlet MOCK_TOTAL_BREAKS_TAKEN_MINUTES = 0;\r\nMOCK_TAKEN_BREAKS.forEach(b => {\r\n    MOCK_TOTAL_BREAKS_TAKEN_MINUTES += b.duration;\r\n});\r\n// --- END MOCK BREAK DATA ---\r\n\r\n// Get elements for the Shift Details Modal display\r\nconst shiftDetailsModalElement = document.getElementById('shiftDetailsModal');\r\nconst timeSinceLoginDisplay = document.getElementById('timeSinceLoginDisplay');\r\nconst breaksAvailedDisplay = document.getElementById('breaksAvailedDisplay');\r\nconst breaksAvailableDisplay = document.getElementById('breaksAvailableDisplay');\r\nconst timeToLogoutDisplay = document.getElementById('timeToLogoutDisplay');\r\n\r\n// Function to format milliseconds into HH:MM:SS (used for both)\r\nfunction formatDuration(ms) {\r\n    // Handle negative time (e.g., if shift is over)\r\n    if (ms < 0) {\r\n        ms = 0; // Cap at 0 to avoid negative display\r\n    }\r\n\r\n    const totalSeconds = Math.floor(ms / 1000);\r\n    const hours = Math.floor(totalSeconds / 3600);\r\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n    const seconds = totalSeconds % 60;\r\n\r\n    return [hours, minutes, seconds]\r\n        .map(unit => unit < 10 ? '0' + unit : unit)\r\n        .join(':');\r\n}\r\n\r\n\r\n// --- Function to calculate and update Shift Details Modal ---\r\nfunction updateShiftDetails() {\r\n    const loginStartTimeString = localStorage.getItem(\"loginStartTime\");\r\n    if (!loginStartTimeString) {\r\n        console.error(\"Login start time not found in localStorage.\");\r\n        if (timeSinceLoginDisplay) timeSinceLoginDisplay.textContent = 'N/A';\r\n        if (breaksAvailedDisplay) breaksAvailedDisplay.textContent = 'N/A';\r\n        if (breaksAvailableDisplay) breaksAvailableDisplay.textContent = 'N/A';\r\n        if (timeToLogoutDisplay) timeToLogoutDisplay.textContent = 'N/A';\r\n        return;\r\n    }\r\n    const loginStartTime = new Date(loginStartTimeString);\r\n    const now = new Date();\r\n    const timeElapsedMs = now.getTime() - loginStartTime.getTime();\r\n\r\n    // Calculate Time Since Login\r\n    const timeSinceLoginFormatted = formatDuration(timeElapsedMs);\r\n    if (timeSinceLoginDisplay) {\r\n        timeSinceLoginDisplay.textContent = timeSinceLoginFormatted;\r\n    }\r\n\r\n    // Calculate Breaks Availed\r\n    // For now, we'll just show the total mocked. If you need specific times,\r\n    // your MOCK_TAKEN_BREAKS needs 'start' times, and this logic expands.\r\n    let breaksAvailedText = \"\";\r\n    if (MOCK_TOTAL_BREAKS_TAKEN_MINUTES > 0) {\r\n        // If you had actual break records with start/end times:\r\n        // MOCK_TAKEN_BREAKS.forEach(b => {\r\n        //     const duration = Math.round((b.end.getTime() - b.start.getTime()) / (1000 * 60));\r\n        //     const breakStartTime = b.start.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n        //     breaksAvailedText += `${duration} minutes (${b.type} at ${breakStartTime}) `;\r\n        // });\r\n        // For now, simplify based on mock total:\r\n        breaksAvailedText = `${MOCK_TOTAL_BREAKS_TAKEN_MINUTES} minutes`;\r\n        // To add specific details like \"1st Break at X time\":\r\n        if (MOCK_TAKEN_BREAKS.length > 0 && MOCK_TAKEN_BREAKS[0].type === \"1st Break\") {\r\n            // This is a placeholder; requires actual break start time to be meaningful\r\n            breaksAvailedText += ` (1st Break taken)`; // Refine with actual time if available\r\n        }\r\n    } else {\r\n        breaksAvailedText = \"None\";\r\n    }\r\n\r\n    if (breaksAvailedDisplay) {\r\n        breaksAvailedDisplay.textContent = breaksAvailedText;\r\n    }\r\n\r\n    // Calculate Breaks Available\r\n    const remainingBreakAllowance = MOCK_TOTAL_BREAK_ALLOWANCE_MINUTES - MOCK_TOTAL_BREAKS_TAKEN_MINUTES;\r\n    let breaksAvailableText = \"None\";\r\n\r\n    if (remainingBreakAllowance > 0) {\r\n        let availableBreakParts = [];\r\n        // This is a more explicit mapping based on your typical break structure.\r\n        // Adjust these conditions based on how you track specific breaks being taken.\r\n        const isFirstBreakTaken = MOCK_TAKEN_BREAKS.some(b => b.type === \"1st Break\");\r\n        const isFoodBreakTaken = MOCK_TAKEN_BREAKS.some(b => b.type === \"Food Break\"); // Assuming you'd have a 'Food Break' type\r\n\r\n        if (!isFirstBreakTaken && TOTAL_BREAK_ALLOWANCE_MINUTES >= 25) { // Assuming 1st break is 25 mins\r\n            availableBreakParts.push(\"25 minutes (1st Break)\");\r\n        }\r\n        if (!isFoodBreakTaken && TOTAL_BREAK_ALLOWANCE_MINUTES >= 50) { // Assuming Food Break is 50 mins\r\n            // This condition might need refinement if 1st break is mandatory before food break\r\n            availableBreakParts.push(\"50 minutes (Food Break)\");\r\n        }\r\n        // If specific types are covered, but there's still generic allowance left\r\n        if (availableBreakParts.length === 0 && remainingBreakAllowance > 0) {\r\n            availableBreakParts.push(`${remainingBreakAllowance} minutes (Remaining)`);\r\n        }\r\n        breaksAvailableText = availableBreakParts.join(', ') || \"None\";\r\n    }\r\n\r\n    if (breaksAvailableDisplay) {\r\n        breaksAvailableDisplay.textContent = breaksAvailableText;\r\n    }\r\n\r\n    // Calculate Time to Logout\r\n    const shiftDurationMs = MOCK_SHIFT_DURATION_HOURS * 60 * 60 * 1000;\r\n    // Total time for the shift, including any breaks taken if they don't count towards work hours\r\n    const expectedTotalShiftDurationMs = shiftDurationMs + (MOCK_TOTAL_BREAKS_TAKEN_MINUTES * 60 * 1000);\r\n    const shiftEndTime = new Date(loginStartTime.getTime() + expectedTotalShiftDurationMs);\r\n    const timeLeftMs = shiftEndTime.getTime() - now.getTime();\r\n\r\n    const timeToLogoutFormatted = formatDuration(timeLeftMs);\r\n    if (timeToLogoutDisplay) {\r\n        timeToLogoutDisplay.textContent = timeToLogoutFormatted;\r\n    }\r\n\r\n    // console.log(`Shift Details Updated: Time Since Login: ${timeSinceLoginFormatted}, Breaks Availed: ${breaksAvailedText}, Breaks Available: ${breaksAvailableText}, Time to Logout: ${timeToLogoutFormatted}`);\r\n}\r\n// --- END Shift Details Specific Functions ---\r\n\r\n\r\n// --- Inactivity Timer Functions ---\r\nfunction resetInactivityTimer() {\r\n    // console.log('resetInactivityTimer() called at:', new Date().toLocaleTimeString());\r\n    clearTimeout(inactivityTimeout);\r\n    clearTimeout(modalTimeout);\r\n    document.title = originalTitle; // Reset title if it was changed by inactivity warning\r\n    if (inactivityModal) { // Ensure modal is hidden if it was shown\r\n        inactivityModal.style.display = \"none\";\r\n    }\r\n\r\n    modalTimeout = setTimeout(function() {\r\n        // console.log('modalTimeout expired at:', new Date().toLocaleTimeString());\r\n        showInactivityWarningModal(); // Use a more specific name\r\n    }, 13 * 60 * 1000); // Show modal after 13 minutes\r\n\r\n    inactivityTimeout = setTimeout(logout, 15 * 60 * 1000); // Logout after 15 minutes\r\n}\r\n\r\nfunction showInactivityWarningModal() { // Renamed from showModal\r\n    // console.log(\"showInactivityWarningModal() called at:\", new Date().toLocaleTimeString());\r\n\r\n    inactivityModal = document.getElementById(\"inactivityModal\"); // Re-get the element just in case it was null\r\n\r\n    if (inactivityModal) {\r\n        inactivityModal.style.display = \"block\";\r\n        // console.log(\"inactivityModal.style.display set to: block at:\", new Date().toLocaleTimeString());\r\n    } else {\r\n        console.error(\"inactivityModal is NULL inside showInactivityWarningModal() at:\", new Date().toLocaleTimeString());\r\n        // Attempt to re-inject if it's missing (fallback)\r\n        initializeInactivityModal();\r\n        inactivityModal = document.getElementById(\"inactivityModal\");\r\n        if (inactivityModal) inactivityModal.style.display = \"block\";\r\n    }\r\n}\r\n\r\nfunction logout() {\r\n    // console.log(\"logout() called at:\", new Date().toLocaleTimeString());\r\n    if (inactivityModal) {\r\n        inactivityModal.style.display = \"none\";\r\n    }\r\n\r\n    // Prevent further timeouts and interactions\r\n    clearTimeout(inactivityTimeout);\r\n    clearTimeout(modalTimeout);\r\n    document.onmousemove = null;\r\n    document.onkeydown = null;\r\n    document.onmousedown = null;\r\n    document.ontouchstart = null;\r\n    document.onscroll = null;\r\n\r\n    // Display logout message and redirect\r\n    const messageElement = document.createElement(\"div\");\r\n    messageElement.style.position = \"fixed\";\r\n    messageElement.style.top = \"50%\";\r\n    messageElement.style.left = \"50%\";\r\n    messageElement.style.transform = \"translate(-50%, -50%)\";\r\n    messageElement.style.backgroundColor = \"#f0f0f0\";\r\n    messageElement.style.padding = \"20px\";\r\n    messageElement.style.border = \"1px solid #ccc\";\r\n    messageElement.style.borderRadius = \"5px\";\r\n    messageElement.style.zIndex = \"1000\";\r\n    messageElement.style.textAlign = \"center\"; // Center the text\r\n    document.body.appendChild(messageElement);\r\n\r\n    let countdown = 120;\r\n    const updateMessage = () => {\r\n        messageElement.textContent = `You have been logged out due to inactivity. Redirecting in ${countdown} second${countdown === 1 ? '' : 's'}...`;\r\n        if (countdown <= 0) {\r\n            messageElement.remove();\r\n            // This path needs to be correct relative to htdocs\r\n            window.location.href = \"/operations/entry_exit/logout.php\"; // Corrected path assumption\r\n        } else {\r\n            countdown--;\r\n            setTimeout(updateMessage, 1000);\r\n        }\r\n    };\r\n\r\n    updateMessage();\r\n}\r\n\r\n// Function to initialize the inactivity modal HTML (called if missing)\r\nfunction initializeInactivityModal() {\r\n    const modalHtml = `\r\n        <div id=\"inactivityModal\" style=\"display: none; position: fixed; z-index: 50; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.5);\">\r\n            <div id=\"inactivityModalContent\" style=\"background-color: #f8f9fa; margin: 15% auto; padding: 30px 40px; border-radius: 10px; box-shadow: 0 10px 20px rgba(0,0,0,0.2), 0 6px 6px rgba(0,0,0,0.19); width: 90%; max-width: 400px; text-align: center;\">\r\n\r\n                <h2 style=\"font-size: 24px; font-weight: bold; color: #333333; margin-bottom: 5px;\">Inactivity Detected</h2>\r\n                <hr style=\"border-top: 1px solid #ddd; margin-bottom: 20px;\">\r\n                <p style=\"font-size: 16px; color: #555555; margin-bottom: 20px;\">You have been inactive for a while. Please click \"Continue Session\" to continue.</p>\r\n                <p style=\"font-size: 14px; color: #777777; margin-bottom: 30px;\">Inactivity for two more minutes will make you logout of your session</p>\r\n                <button id=\"inactivityModalOk\" style=\"background-color: #e74c3c; color: #ffffff; padding: 10px 20px; border-radius: 5px; text-decoration: none; font-weight: bold; cursor: pointer;\">Continue Session</button>\r\n            </div>\r\n        </div>\r\n    `;\r\n    // Ensure the modal is appended only once\r\n    if (!document.getElementById(\"inactivityModal\")) {\r\n        document.body.insertAdjacentHTML('beforeend', modalHtml);\r\n        // Re-get element references after adding HTML\r\n        inactivityModal = document.getElementById(\"inactivityModal\");\r\n        inactivityModalOk = document.getElementById(\"inactivityModalOk\");\r\n\r\n        if (inactivityModalOk) {\r\n            inactivityModalOk.onclick = function() {\r\n                inactivityModal.style.display = \"none\";\r\n                resetInactivityTimer();\r\n            };\r\n        } else {\r\n            console.error(\"inactivityModalOk element not found after re-injection\");\r\n        }\r\n    }\r\n}\r\n// --- END Inactivity Timer Functions ---\r\n\r\n\r\nwindow.addEventListener(\"load\", function() {\r\n    let startTime = localStorage.getItem(\"loginStartTime\");\r\n\r\n    // If no start time is saved, set it now. This will be the reference for both\r\n    // \"Time Since Login\" and \"Time to Logout\".\r\n    if (!startTime) {\r\n        startTime = new Date().toISOString();\r\n        localStorage.setItem(\"loginStartTime\", startTime);\r\n        console.log(\"New loginStartTime set:\", startTime);\r\n    } else {\r\n        console.log(\"Existing loginStartTime found:\", startTime);\r\n    }\r\n\r\n    // Listen for the Shift Details modal to be shown (Bootstrap event)\r\n    if (shiftDetailsModalElement) {\r\n        shiftDetailsModalElement.addEventListener('show.bs.modal', function (event) {\r\n            console.log(\"Shift Details Modal is about to be shown. Updating details...\");\r\n            updateShiftDetails(); // Update details right before showing\r\n        });\r\n    }\r\n\r\n    // Initialize the inactivity modal HTML and its event listeners\r\n    initializeInactivityModal();\r\n\r\n    // Set up inactivity detection listeners\r\n    document.onmousemove = function() { resetInactivityTimer(); };\r\n    document.onkeydown = function() { resetInactivityTimer(); };\r\n    document.onmousedown = function() { resetInactivityTimer(); };\r\n    document.ontouchstart = function() { resetInactivityTimer(); };\r\n    document.onscroll = function() { resetInactivityTimer(); };\r\n\r\n    // Start the inactivity timer on page load\r\n    resetInactivityTimer();\r\n\r\n    originalTitle = document.title;\r\n    console.log(\"window.onload finished for timer.js. Inactivity system active.\");\r\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// general_api.js\r\n\r\nimport { initDeviceRestriction } from './device_restriction.js';\r\nimport { loadAndShowModal, initGModalLoader } from './g_modal_loader.js';\r\nimport { initIdleTimeCounter } from './idle_time_counter.js';\r\nimport { initPasswordToggler } from './password_toggler.js';\r\nimport { initProfileTabs } from './profileTabs.js';\r\nimport { initScrollToTop } from './scrollToTop.js';\r\nimport { initThemeToggler } from './theme_toggler.js';\r\nimport { initSidebar } from './sidebar.js';\r\n\r\n// Expose a global API object on window for site-wide access\r\nwindow.GeneralAPI = {\r\n  initDeviceRestriction,\r\n  loadAndShowModal,\r\n  initGModalLoader,\r\n  initIdleTimeCounter,\r\n  initPasswordToggler,\r\n  initProfileTabs,\r\n  initScrollToTop,\r\n  initThemeToggler,\r\n  initSidebar,\r\n}\r\n\r\n// Optionally initialize some or all automatically on DOMContentLoaded\r\n// Uncomment if you want this behavior:\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n//   GeneralAPI.initDeviceRestriction();\r\n     GeneralAPI.initGModalLoader();\r\n//   GeneralAPI.initIdleTimeCounter();\r\n//   GeneralAPI.initPasswordToggler();\r\n\t GeneralAPI.initProfileTabs();\r\n//   GeneralAPI.initScrollToTop();\r\n     GeneralAPI.initThemeToggler();\r\n//   GeneralAPI.initSidebar();\r\n });\r\n"],"names":["toggle","document","getElementById","passwordInput","addEventListener","type","getAttribute","setAttribute","this","classList","fetch","ok","container","console","error","err","alert","modalEl","scrollToTopBtn","preventDefault","initializeSidebarState","bodyElement","sidebarWrapper","sidebarToggle","replace","localStorage","tabId","settingsHeading","profileTabs","themeSwitch","primaryThemeLink","themeModalId","dynamicModalName","modalInstance","window","label","savedTheme","showCustomThemeModal","remove","checked","labelEl","minDesktopWidth","accessDeniedMessage","originalTitle","timeToLogoutDisplay","hours","seconds","showInactivityWarningModal","onscroll","messageElement","transform","style","backgroundColor","padding","border","borderRadius","zIndex","textAlign","updateMessage","countdown","loginStartTimeString","timeSinceLoginFormatted","isFoodBreakTaken","availableBreakParts","push","breaksAvailableDisplay","_profileTabs","require","_scrollToTop","_theme_toggler","_sidebar","initPasswordToggler","initProfileTabs","initScrollToTop","initThemeToggler","initSidebar"],"sourceRoot":""}